import React, { useState, useEffect } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import { FaArrowLeft } from 'react-icons/fa';
import { useTranslation } from 'react-i18next';
import { supabase } from '../../utils/supabase';

const EditCategory = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const { t } = useTranslation();

  const [category, setCategory] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);

  // üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ id
  useEffect(() => {
    const fetchCategory = async () => {
      try {
        const { data, error } = await supabase
          .from('Category') // üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
          .select('*')
          .eq('id', id)
          .single();

        if (error) throw error;
        if (!data) {
          setError('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        } else {
          setCategory(data);
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err.message);
        setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
      } finally {
        setIsLoading(false);
      }
    };

    fetchCategory();
  }, [id]);

  // üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –≤–≤–æ–¥–µ
  const handleChange = (e) => {
    const { name, value } = e.target;
    setCategory((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  // üîπ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const { error } = await supabase
        .from('Category') // üëà –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        .update(category)
        .eq('id', id);

      if (error) throw error;

      alert('–ö–∞—Ç–µ–≥–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
      navigate('/dashboard/category');
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err.message);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  if (isLoading) {
    return <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...</p>;
  }

  if (error) {
    return <p style={{ color: 'red' }}>{error}</p>;
  }

  if (!category) {
    return <p>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</p>;
  }

  return (
    <div className="add-category">
      <button className="back-button" onClick={() => navigate(-1)}>
        <FaArrowLeft /> {t('back')}
      </button>

      <h2>{t('Edit Category')}</h2>
      <form onSubmit={handleSubmit}>
        <div className="row-wrapper">
          {['en', 'ru', 'uz'].map((lang) => (
            <div className="lang-box" key={lang}>
              <label>Name ({lang.toUpperCase()})</label>
              <input
                type="text"
                name={`name_${lang}`}
                value={category[`name_${lang}`] || ''}
                onChange={handleChange}
                required
              />
              <label>Description ({lang.toUpperCase()})</label>
              <textarea
                name={`description_${lang}`}
                value={category[`description_${lang}`] || ''}
                onChange={handleChange}
              />
            </div>
          ))}
        </div>
        <button type="submit">üíæ {t('Update')}</button>
      </form>
    </div>
  );
};

export default EditCategory;